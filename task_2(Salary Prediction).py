# -*- coding: utf-8 -*-
"""TASK 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B3dmDoJ5XlnG96kiL5zkg-BWFIUicm0s
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display, HTML
display (HTML('Data Loading'))

Fname = pd.read_csv("/content/Salary.csv")
Fname.head()

Fname.shape

Fname.columns

Fname.dtypes

Fname.info()

Fname[Fname.duplicated()]

Fname[Fname.duplicated()].shape

Fname1 = Fname.drop_duplicates (keep = 'first')
Fname1.shape

Fname1 = Fname.drop(['FIRST NAME','LAST NAME','DOJ','CURRENT DATE'], axis = 1)

Fname1.shape

Fname1.isnull().sum()

Fname1.dropna(how = 'any',inplace=True)

Fname1.shape

Fname1.head()

"""DATA EXPLORATION AND VISUALIZATION:"""

Fname.describe()

corr = Fname1[['AGE','SALARY','LEAVES USED','LEAVES REMAINING','RATINGS','PAST EXP']].corr()
corr

sns.heatmap(corr,annot = True)

"""DATA VISUALIZATION: BAR CHART, BOX PLOT, HISTOGRAM"""

Fname1['DESIGNATION'].value_counts()

Fname1['DESIGNATION'].value_counts().plot(kind='pie')

Fname1['SEX'].value_counts()

Fname1['SEX'].value_counts().plot(kind='bar')

Fname1['AGE'].value_counts()

plt.figure(figsize=(10, 5))
sns.countplot(data=Fname1, x='AGE', palette='viridis')
plt.xlabel('Age')
plt.ylabel('Count')
plt.title('Distribution of Age')
plt.show()

Fname1['PAST EXP'].value_counts()

Fname1['PAST EXP'].value_counts().plot(kind='bar')

Fname1['SALARY'].value_counts()

Fname1['SALARY'].value_counts().plot(kind='hist')

Fname1['LEAVES USED'].value_counts()

Fname1['LEAVES USED'].value_counts().plot(kind='barh')

Fname1['LEAVES REMAINING'].value_counts()

Fname1['LEAVES REMAINING'].value_counts().plot(kind='barh')

Fname1['RATINGS'].value_counts()

rating_counts=Fname1['RATINGS'].value_counts()
plt.figure(figsize=(5,4))
sns.barplot(x=rating_counts.values, y=rating_counts.index, palette="viridis")
plt.xlabel("Count")
plt.ylabel("Ratings")
plt.title("Rating Distribution")
plt.show()

"""FEATURE ENGINEERING:"""

from sklearn.preprocessing import LabelEncoder

Lable_Encoder = LabelEncoder()

Fname1['SEX Encode']=Lable_Encoder.fit_transform(Fname1['SEX'])

Fname1['DESIGNATION_Encode'] = Lable_Encoder.fit_transform(Fname1 ['DESIGNATION'])

Fname1['UNIT_Encode']=Lable_Encoder.fit_transform(Fname1 ['UNIT'])

Fname1.head()

from sklearn.preprocessing import StandardScaler
std_scaler =StandardScaler()

Fname1 ['AGE scaled'] = std_scaler.fit_transform(Fname1 [['AGE']])

Fname1['PAST EXP_scaled']= std_scaler.fit_transform(Fname1 [['PAST EXP']])
Fname1.head()

x=Fname1[['AGE scaled','SEX Encode','DESIGNATION_Encode','PAST EXP_scaled','UNIT_Encode']]

y=Fname1['SALARY']

x.head()

y.head()

"""SPLITTING THE DATA INTO TRAINING AND TESTING"""

from sklearn.model_selection import train_test_split

x_train ,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2, random_state=42)

x_test.shape, y_test.shape

x_train.head()

x_test.head()

"""MODEL DEVLOPMENT"""

from sklearn.linear_model import LinearRegression

Linear_regeression_model=LinearRegression()

"""MODEL TRANING"""

Linear_regeression_model.fit(x_train, y_train)

"""MODEL PREDICITION"""

y_pred_lr = Linear_regeression_model.predict(x_test)
y_pred_lr

df = pd.DataFrame({'y_Actual':y_test, 'y_predicted':y_pred_lr})
df['Error'] = df['y_Actual'] - df['y_predicted']
df['abs_error'] = abs(df ['Error'])
df

Mean_absolute_error = df['abs_error'].mean()
Mean_absolute_error

"""MODEL EVALUATION"""

from sklearn.metrics import accuracy_score, r2_score
from sklearn.metrics import mean_squared_error, mean_absolute_error

"""MODEL ACCURACY"""

r2_score (y_test, y_pred_lr)

print (f'Accuracy of the model= {round(r2_score(y_test, y_pred_lr),4)*100:.2f}%')

round(mean_absolute_error(y_test,y_pred_lr),2)

print (f"Nean Absolute Error ={round (mean_absolute_error(y_test, y_pred_lr),2)}")

"""MEAN SQUARED ERROR"""

mse = round(mean_squared_error(y_test, y_pred_lr),2)
mse

print (f"Mean Sqaured Error = {round(mean_squared_error(y_test, y_pred_lr),2)}")

"""ROOT MEAN SQUARED ERROR"""

print('Root Mean Squared Error (RMSE)=', mse**(0.5))

Linear_regeression_model.coef_

Linear_regeression_model.intercept_

"""CUSTOMISE PREDICTION"""

Fname1.head()

AGE1 = std_scaler.transform([[25]])
AGE = 8.60064915
SEX = 0
DESIGNATION = 1
PASTEXP1 = std_scaler.transform([[1]])
PASTEXP = -0.2063442
UNIT = 3

std_scaler.transform([[25]])

std_scaler.transform([[1]])

Salary = Linear_regeression_model.predict([[AGE,SEX,DESIGNATION,PASTEXP,UNIT]])
Salary

print("Salary of the employee with above Attributes =", Salary[0])

import pickle

with open('Linear_regeression_model.pk1','wb') as f:
  pickle.dump(Linear_regeression_model,f)
  print("Model Saved")